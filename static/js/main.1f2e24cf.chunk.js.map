{"version":3,"sources":["components/Wrapper/Wrapper.js","components/Navpills/Navpills.js","components/Title/Title.js","components/StampCard/StampCard.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Navpills","href","message","indexOf","style","color","curScore","topScore","Title","StampCard","onClick","selectStamp","name","alt","src","image","App","state","stamps","unselectedStamps","shuffleArray","array","i","length","j","Math","floor","random","_ref","undefined","_this","find","item","setState","otherStamp","filter","_this2","this","components_Wrapper_Wrapper","components_Navpills_Navpills","components_Title_Title","map","stamp","components_StampCard_StampCard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f2e24cf.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./Navpills.css\";\n\nconst Navpills = props => (\n    <div>\n        <ul className=\"nav nav-pills nav-justified\">\n            <li><a href=\"/\">Stamp Clicky Game  | </a></li>\n            <li\n                className={props.message.indexOf('incorrectly') !== -1 ? \n                    \"desc-incorrect\" : \n                    props.message.indexOf('correctly') !== -1 ?\n                        \"desc-correct\" :\n                        \"desc-normal\"}\n            >\n                {props.message}\n            </li>\n            <li>|  Score: <span style={{color: \"yellow\"}}>{props.curScore}</span>  |  Top Score: {props.topScore}</li>\n        </ul>\n    </div>\n);\n\nexport default Navpills;\n\n","import React from \"react\";\nimport \"./Title.css\";\n\nconst Title = props => (\n    <div className=\"titlebox\">\n        <h1>Have fun with Stamp Clicky Game!</h1>\n        <p>Your score will be incremented when clicking an image for the first time. But your score will be reset to 0 if you click the same image more than once.</p>\n    </div>\n);\n\nexport default Title;\n\n","import React from \"react\";\nimport \"./StampCard.css\";\n\nconst StampCard = props => (\n    <div className=\"card\">\n        <div className=\"img-container\">\n            <a onClick={() => props.selectStamp(props.name)} \n                className={props.curScore === 0 ? \"style_prevu_kit style_prevu_kit_ex\" : \"style_prevu_kit\"}\n            >\n                <img alt={props.name} src={props.image} />\n            </a>\n        </div>\n    </div>\n);\n\nexport default StampCard;\n","import React, { Component } from 'react';\nimport './App.css';\nimport stamps from './stamps.json'\nimport Wrapper from './components/Wrapper'\nimport Navpills from './components/Navpills'\nimport Title from './components/Title'\nimport StampCard from './components/StampCard'\n\nclass App extends Component {\n    state = {\n        message: \"Click an image to begin!\",\n        topScore: 0,\n        curScore: 0,\n        stamps: stamps,\n        unselectedStamps: stamps\n    }\n\n    componentDidMount() {\n    }\n\n    shuffleArray = array => {\n        for (let i = array.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n    }\n\n    selectStamp = name => {\n        const sameStamp = this.state.unselectedStamps.find(item => item.name === name);\n\n        if(sameStamp === undefined) {\n            // failure to select a new dog\n            this.setState({ \n                message: \"You guessed incorrectly!\",\n                topScore: (this.state.curScore > this.state.topScore) ? this.state.curScore : this.state.topScore,\n                curScore: 0,\n                stamps: stamps,\n                unselectedStamps: stamps\n            });\n        }\n        else {\n            // success to select a new dog\n            const otherStamp = this.state.unselectedStamps.filter(item => item.name !== name);\n            \n            this.setState({ \n                message: \"You guessed correctly!\",\n                curScore: this.state.curScore + 1,\n                stamps: stamps,\n                unselectedStamps: otherStamp\n            });\n        }\n\n        this.shuffleArray(stamps);\n    };\n\n    render() {\n        return (\n            <Wrapper>\n                <Navpills\n                    message={this.state.message}\n                    curScore={this.state.curScore}\n                    topScore={this.state.topScore}\n                />\n                <Title />\n                {\n                    this.state.stamps.map(stamp => (\n                        <StampCard\n                            name={stamp.name}\n                            image={stamp.image}\n                            selectStamp={this.selectStamp} \n                            curScore={this.state.curScore}\n                        />\n                    ))\n                }\n            </Wrapper>\n        );\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}